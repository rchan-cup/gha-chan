# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
    paths: 
      - features/**
  pull_request:
    branches: [ "main" ]
    paths:
      - feautres/**

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build:

    runs-on: ubuntu-latest
    
    permissions:
      pull-requests: write
      packages: write

    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
        fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest coverage pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    #- name: Test with pytest
      #run: |
        #pytest unit-tests/testdatetransformation.py --doctest-modules --junitxml=junit/test-results.xml --cov=features --cov-report=xml --cov-report=html
    
    #- name: Upload coverage report
      #uses: actions/upload-artifact@v2
      #with:
        #name: coverage-report
        #path: coverage.xml
    
    - name: Run tests with code coverage
      run: pytest --cov=features --cov=pipeline --junitxml=pytest.xml --cov-report=term-missing:skip-covered | tee pytest-coverage.txt
      
    - name: Pytest coverage comment
      id: coverageComment
      uses: MishaKav/pytest-coverage-comment@main
      with:
        github-token: ${{ secrets.PAT_SECRET }}
        pytest-coverage-path: pytest-coverage.txt
        junitxml-path: pytest.xml
        hide-report: true
        

    #- name: Check the output coverage
     # run: |
      #  echo "Coverage Percantage - ${{ steps.coverageComment.outputs.coverage }}"
       # echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
        #echo "Coverage Html - ${{ steps.coverageComment.outputs.coverageHtml }}"
        #echo "Summary Report - ${{ steps.coverageComment.outputs.summaryReport }}"

       # echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"

        #echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
        #echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
        #echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
        #echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
        #echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"
        #echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"

    #- name: update file and push to remote
     # run: |
      #  echo "Test push commit to the remote in the workflow" >> test.txt
       # git config --global user.name "rchan-cup"
        #git config --global user.email "rose.chan@cambridge.org"

        #git add -A
        #git commit -m "Update test.txt"
        
    #- name: Push changes
     # uses: ad-m/github-push-action@master
      #with:
       # github_token: ${{ secrets.PAT_SECRET }}
        #branch: ${{ github.ref }}
    #- name: Update Readme with Coverage Html
     # if: ${{ github.ref == 'refs/heads/main' }}
     # run: |
     #   echo "update run"
     #   sed -i '/<!-- Pytest Coverage Comment:Begin -->/,/<!-- Pytest Coverage Comment:End -->/c\<!-- Pytest Coverage Comment:Begin -->\n\${{ steps.summary_report.outputs.content }}\n<!-- Pytest Coverage Comment:End -->' README.md

    #- name: Commit & Push changes to Readme
    #  if: ${{ github.ref == 'refs/heads/main' }}
    #  uses: actions-js/push@master
    #  with:
    #    message: Update coverage on Readme
    #    github_token: ${{ secrets.PAT_SECRET }}

    - name: Run Python script
      run: python update_readme.py ${{ steps.coverageComment.outputs.coverage }} ${{ steps.coverageComment.outputs.color }}

    - name: Commit and push changes
      run: |
        git config --global user.name "rchan-cup"
        git config --global user.email "rose.chan@cambridge.org"
        git add README.md
        git commit -m "Update README with workflow"
        #git push
      
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.PAT_SECRET }}
        branch: ${{ github.ref }}
